#include <mpi.h>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <omp.h>

#define N 1000

using namespace std;

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int size, rank;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    int rows_per_process = N / size;
    int extra_rows = N % size;
    int my_rows = (rank < extra_rows) ? rows_per_process + 1 : rows_per_process;
    int my_first_row = (rank < extra_rows) ? rank * my_rows : rank * my_rows + extra_rows;
    int my_last_row = my_first_row + my_rows - 1;

    double* A = new double[N * my_rows];
    double* B = new double[N * N];
    double* C = new double[N * my_rows];

    if (rank == 0) {
        // Initialize matrices A and B with random values
        srand(time(NULL));
        for (int i = 0; i < N * N; i++) {
            B[i] = (double)rand() / RAND_MAX;
        }
        for (int i = 0; i < N * N; i++) {
            A[i] = (double)rand() / RAND_MAX;
        }
    }

    // Scatter matrix A to all processes
    MPI_Scatter(A, N * my_rows, MPI_DOUBLE, A, N * my_rows, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Broadcast matrix B to all processes
    MPI_Bcast(B, N * N, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Compute matrix multiplication
    #pragma omp parallel for
    for (int i = 0; i < my_rows; i++) {
        for (int j = 0; j < N; j++) {
            C[i * N + j] = 0.0;
            for (int k = 0; k < N; k++) {
                C[i * N + j] += A[i * N + k] * B[k * N + j];
            }
        }
    }

    // Gather matrix C from all processes
    MPI_Gather(C, N * my_rows, MPI_DOUBLE, C, N * my_rows, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Print the result
    if (rank == 0) {
        // print out the result
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cout << C[i * N + j] << " ";
            }
            cout << endl;
        }
    }

    delete[] A;
    delete[] B;
    delete[] C;

    MPI_Finalize();
    return 0;
}
